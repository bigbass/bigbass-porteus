#embed gtk3 in bacon


#summary Convert gtk3 official examples to BacCon .

The official site is http://www.basic-converter.org/
The official forum is http://basic-converter.proboards.com/ 



= BaCon with GTK3 Examples =

Getting started with sample widgets
Most of the examples have been converted from the gtk3 official examples
ported to BaCon code 
as a reference only to make it easier to see
how to code it with BaCon

*TOP*    Sorry for the no color highlighting wiki doesn't have BaCon yet

|| The widgets ||
|| [#CHECK CHECK] || [#SPINNER SPINNER] || [#RADIO RADIO] ||
|| [#TEXT TEXT] || [#SWITCH2 SWITCH2] || [#SWITCH SWITCH] ||
|| [#LABEL LABEL] || [#HELLO2 HELLO2] || [#NOTYET NOTYET] ||
|| [#DIALOG DIALOG] || [#WINDOW WINDOW] || [#NOTYET NOTYET] ||
----




== CHECK ==

how to convert official examples to Simplified embedded gtk ones in BaCon
using the new PROTO option

using this official example code as the reference
[https://developer.gnome.org/gnome-devel-demos/3.5/checkbutton.c.html.en]



||*  Example code: check-gtk3-proto.bac*||


<code language="xml">

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_window_set_title 
PROTO gtk_container_add 
PROTO gtk_toggle_button_set_active 
PROTO gtk_widget_show_all 
PROTO gtk_window_set_default_size 
PROTO gtk_window_set_title 
PROTO gtk_application_new 
PROTO gtk_application_window_new 
PROTO gtk_check_button_new_with_label 
PROTO g_signal_connect_data


PROTO gtk_toggle_button_get_active

'--- signal handler for "toggled" signal of the CheckButton

'====================
SUB toggled_cb
'==================== 
	
	
	TBUT = gtk_toggle_button_get_active (checkbutton)
	IF TBUT = 1 THEN
		gtk_window_set_title (window, "CheckButton Example")
	ELSE 
		gtk_window_set_title (window, "Callback working")
	END IF 
	PRINT TBUT
    
	
END SUB



	gtk_init(0, 0)	
	
	window = gtk_window_new ()
	gtk_window_set_title (window, "CheckButton Example")
	gtk_window_set_default_size (window, 300, 100)
	
	checkbutton = gtk_check_button_new_with_label ("Show Title")
	gtk_toggle_button_set_active (checkbutton, TRUE)
	
	g_signal_connect_data(checkbutton, "notify::active",toggled_cb, 0, 0, 0)
	gtk_container_add (window, checkbutton)
	gtk_widget_show_all (window)	

	gtk_main


</code>


[#TOP Back to top of document]

----

== TEXT ==

another official example
[https://developer.gnome.org/gnome-devel-demos/3.5/textview.c.html.en]



||*Example code: text-gtk3-proto.bac*||

<code language="xml">
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_container_add 
PROTO gtk_container_set_border_width 
PROTO gtk_scrolled_window_set_policy 
PROTO gtk_text_view_set_wrap_mode 
PROTO gtk_widget_show_all 
PROTO gtk_window_set_default_size 
PROTO gtk_window_set_title 
PROTO gtk_application_new 
PROTO gtk_application_window_new 
PROTO gtk_scrolled_window_new 
PROTO gtk_text_buffer_new 
PROTO gtk_text_view_new_with_buffer 

GTK_WRAP_WORD = 2
GTK_POLICY_AUTOMATIC = 1


'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB



 
	gtk_init(0, 0)
	
	'--- Create a window with a title, and a default size 
	window = gtk_window_new ()
	gtk_window_set_title (window, "TextView Example")
	gtk_window_set_default_size (window, 220, 200)
	g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
	
	'--- The text buffer represents the text being edited 
	buffer = gtk_text_buffer_new (NULL)
	
	
	'--- Text view is a widget in which can display the text buffer. 
	'--- The line wrapping is set to break lines in between words.
	
	text_view = gtk_text_view_new_with_buffer (buffer)
	gtk_text_view_set_wrap_mode (text_view, GTK_WRAP_WORD) 
	
	
	'--- Create the scrolled window. Usually NULL is passed for both parameters so 
	'--- that it creates the horizontal/vertical adjustments automatically. Setting 
	'--- the scrollbar policy to automatic allows the scrollbars to only show up 
	'--- when needed. 
	
	scrolled_window = gtk_scrolled_window_new (NULL, NULL)
	gtk_scrolled_window_set_policy (scrolled_window, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC) 
	'--- The function directly below is used to add children to the scrolled window 
	'--- with scrolling capabilities (e.g text_view), otherwise, 
	'--- gtk_scrolled_window_add_with_viewport() would have been used
	
	gtk_container_add (scrolled_window, text_view)
	gtk_container_set_border_width (scrolled_window, 5)
	
	gtk_container_add (window, scrolled_window)	
	gtk_widget_show_all (window)	
	gtk_main	
	
	
	
	



</code>


[#TOP Back to top of document]

----



== SPINNER ==

original code was not complete to show callbacks and a fully working example 
[https://developer.gnome.org/gnome-devel-demos/3.8/spinner.c.html.en]

*had to add callbacks , buttons and signals* 

||*Example code: spinner-gtk3-proto.bac*||

<code language="xml">

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_window_set_title
PROTO gtk_widget_show_all
PROTO g_signal_connect_data
PROTO gtk_spinner_new
PROTO gtk_spinner_start
PROTO gtk_spinner_stop
PROTO gtk_container_add
PROTO gtk_window_set_default_size
PROTO gtk_box_new
PROTO gtk_box_set_homogeneous
PROTO gtk_box_pack_start

PROTO gtk_radio_action_set_group(

GTK_ORIENTATION_VERTICAL = 1


'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB




'=====================
SUB radio_clicked()
'=====================
	
	CLEAR
	PRINT "button1"
	gtk_spinner_start (spinner)

END SUB




'=====================
SUB radio_clicked2()
'=====================
	CLEAR
	PRINT "button2"
	gtk_spinner_stop (spinner)

END SUB





gtk_init(0, 0)

window = gtk_window_new ()
gtk_window_set_default_size (window, 200, 200)
gtk_window_set_title (window, "Spinner test")
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)

spinner = gtk_spinner_new ()


'---Create a radio button1 with a label
radio1 = gtk_radio_button_new_with_label_from_widget (radio1, "Start spinner.")
g_signal_connect_data(radio1, "clicked",radio_clicked, 0, 0, 0)



'---Create a radio button2 with a label
radio2 = gtk_radio_button_new_with_label_from_widget (radio2, "Stop spinner.")
g_signal_connect_data(radio2, "clicked",radio_clicked2, 0, 0, 0)
gtk_radio_action_set_group(radio1,2)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, radio1, TRUE, TRUE, 2
gtk_box_pack_start (box, radio2, TRUE, TRUE, 2)
gtk_box_pack_start (box, spinner, TRUE, TRUE, 2)
gtk_container_add (window, box)

gtk_widget_show_all (window)
gtk_main



</code>

[#TOP Back to top of document]

----


== RADIO ==

[https://developer.gnome.org/gnome-devel-demos/3.8/radiobutton.c.html.en]



||*Example code: radio-gtk3-proto.bac*||

<code language="xml">
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_box_set_homogeneous
PROTO gtk_box_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_widget_show_all

'--- set undeclared values
GTK_WINDOW_TOPLEVEL = 0
GTK_ORIENTATION_VERTICAL = 1

'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB



'=====================
SUB radio_clicked()
'=====================
    CLEAR
    PRINT "button1"
END SUB


'=====================
SUB radio_clicked2()
'=====================
    CLEAR
    PRINT "button2"
END SUB



'=====================
SUB radio_clicked3()
'=====================
    CLEAR
    PRINT "button3"
END SUB




gtk_init(0, 0)

window = gtk_window_new (GTK_WINDOW_TOPLEVEL)
box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

'---Create a radio button1 with a label
radio1 = gtk_radio_button_new_with_label_from_widget (radio1, "I'm the first radio button.")
g_signal_connect_data(radio1, "clicked",radio_clicked, 0, 0, 0)

'---Create a radio button2 with a label
radio2 = gtk_radio_button_new_with_label_from_widget (radio2, "I'm the second radio button.")
g_signal_connect_data(radio2, "clicked",radio_clicked2, 0, 0, 0)

'---Create a radio button3 with a label
radio3 = gtk_radio_button_new_with_label_from_widget (radio3, "I'm the third radio button.")
g_signal_connect_data(radio3, "clicked",radio_clicked3, 0, 0, 0)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, radio1, TRUE, TRUE, 2)
gtk_box_pack_start (box, radio2, TRUE, TRUE, 2)
gtk_box_pack_start (box, radio3, TRUE, TRUE, 2)
gtk_container_add (window, box)
gtk_widget_show_all (window)

gtk_main


</code>

[#TOP Back to top of document]


----


== SWITCH2 ==

[https://developer.gnome.org/gnome-devel-demos/3.5/switch.c.html.en]

||*Example code: switch2-gtk3-proto.bac*||

<code language="xml">

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_switch_new
PROTO gtk_window_set_title
PROTO gtk_window_set_default_size
PROTO gtk_container_set_border_width
PROTO gtk_switch_set_active
PROTO gtk_grid_set_column_spacing
PROTO gtk_grid_attach




'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB




'=====================
SUB switch_clicked()
'=====================
    CLEAR
    PRINT "switch button1"
    SW1 = gtk_switch_get_active (switch1)
    PRINT SW1
END SUB





gtk_init(0, 0)

'---Create a window with a set title and default size.
'---Also, set a border width for the amount of space
'---to leave inside the window

window = gtk_window_new ()
gtk_window_set_title (window, "Switch Example")
gtk_window_set_default_size (window, 300, 100)
gtk_container_set_border_width (window, 10)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)



'---Create a label---'
label = gtk_label_new ("Title")


'---Create a switch with a default active state
switch1 = gtk_switch_new ()
gtk_switch_set_active (switch1, TRUE)


'---Create a grid and set the column spacing,
'---attach the label
'---switch onto the grid
'---position them accordingly
grid = gtk_grid_new()
gtk_grid_set_column_spacing (grid, 10)
gtk_grid_attach (grid, label, 0, 0, 1, 1)
gtk_grid_attach (grid, switch1, 1, 0, 1, 1)

'---Connecting the clicked signal to the callback
g_signal_connect_data(switch1, "notify::active",switch_clicked, 0, 0, 0)


gtk_container_add (window, grid)
gtk_widget_show_all (window)
gtk_main

</code>

[#TOP Back to top of document]




----



== SWITCH ==

[http://]

||*Example code: switch-gtk3-proto.bac*||

<code language="xml">
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_box_set_homogeneous
PROTO gtk_box_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_switch_new 

'--- set undeclared values
GTK_WINDOW_TOPLEVEL = 0
GTK_ORIENTATION_VERTICAL = 1






'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB



'=====================
SUB switch_clicked()
'=====================
	CLEAR
	PRINT "switch button1"
	SW1 = gtk_switch_get_active (switch1)
	PRINT SW1
	END SUB


'=====================
SUB switch_clicked2()
'=====================
	CLEAR
	PRINT "switch button2"
	SW2 = gtk_switch_get_active (switch2)
	PRINT SW2
END SUB



'=====================
SUB switch_clicked3()
'=====================
	CLEAR
	PRINT "switch button3"
	SW3 = gtk_switch_get_active (switch3)
	PRINT SW3
END SUB




gtk_init(0, 0)

window = gtk_window_new (GTK_WINDOW_TOPLEVEL)

box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

label = gtk_label_new ("Switch Test ");


'---Create a switch button1
switch1 = gtk_switch_new ()
g_signal_connect_data(switch1, "notify::active",switch_clicked, 0, 0, 0)

'---Create a switch button2
switch2 = gtk_switch_new ()
g_signal_connect_data(switch2, "notify::active",switch_clicked2, 0, 0, 0)

'---Create a switch button3
switch3 = gtk_switch_new ()
g_signal_connect_data(switch3, "notify::active",switch_clicked3, 0, 0, 0)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, label, 0, 0, 1, 1)
gtk_box_pack_start (box, switch1, TRUE, TRUE, 2)
gtk_box_pack_start (box, switch2, TRUE, TRUE, 2)
gtk_box_pack_start (box, switch3, TRUE, TRUE, 2)
gtk_container_add (window, box)
gtk_widget_show_all (window)

gtk_main

</code>

[#TOP Back to top of document]




----





== NOTYET ==

[http://]

||*Example code: notyet.bac*||

<code language="xml">

</code>

[#TOP Back to top of document]




----






== LABEL ==

ported from [http://www.cs.dartmouth.edu/~xy/cs23/gtk.html]
layout.c now call it lable-gtk2-proto.bac by bigbass


||*Example code: lable-gtk2-proto.bac*||

<code language="xml">
'
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`



'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO gtk_window_set_position
PROTO gtk_window_set_default_size
PROTO gtk_label_new
PROTO gtk_hbox_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit


' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1




'===============
SUB exit_prog
'===============
gtk_main_quit
END SUB




gtk_init(0, 0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_title(window, "Layout")
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 300, 200)

g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

label1 = gtk_label_new("Label 1")
label2 = gtk_label_new("Label 2")
label3 = gtk_label_new("Label 3")

hbox = gtk_hbox_new(TRUE, 5)
vbox = gtk_vbox_new(FALSE, 10)

gtk_box_pack_start(vbox, label1, TRUE, FALSE, 5)
gtk_box_pack_start(vbox, label2, TRUE, FALSE, 5)
gtk_box_pack_start(hbox, vbox, FALSE, FALSE, 5)
gtk_box_pack_start(hbox, label3, FALSE, FALSE, 5)

gtk_container_add(window, hbox)
gtk_widget_show_all(window)
gtk_main

</code>

[#TOP Back to top of document]




----





== HELLO2 ==

ported from [http://www.cs.dartmouth.edu/~xy/cs23/gtk.html]

||*Example code: hello2-gtk2-proto.bac*||

<code language="xml">
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`



'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit


' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0



'===============
SUB exit_prog
'===============
    gtk_main_quit
END SUB



    
    gtk_init(0, 0)

    window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
    gtk_window_set_title(window, "Hello World!")

    /* Connect the main window to the destroy ---> replace with SUB exit_prog */
    g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

    gtk_widget_show_all(window)        
    
    gtk_main



</code>

[#TOP Back to top of document]




----


== DIALOG ==

[http://]

||*Example code: dialog-gtk2-proto.bac*||

<code language="xml">
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`


PROTO gtk_init, gtk_message_dialog_new

CONST GTK_STOCK_OK = 1

gtk_init(0, 0)
x = gtk_dialog_run(gtk_message_dialog_new(0, 0, 0, GTK_STOCK_OK,"Greetings from BaCon!"))
</code>

[#TOP Back to top of document]




----


== WINDOW ==

[http://]

||*Example code: window-gtk2-proto.bac*||

<code language="xml">
'
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`

'ported from [url]http://www.cs.dartmouth.edu/~xy/cs23/gtk.html[/url]
'layout.c now call it layout-proto.bac by bigbass




'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO gtk_window_set_position
PROTO gtk_window_set_default_size
PROTO gtk_label_new
PROTO gtk_hbox_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit


' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1




'===============
SUB exit_prog
'===============
gtk_main_quit
END SUB




gtk_init(0, 0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_title(window, "Layout")
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 300, 200)

g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

label1 = gtk_label_new("Label 1")
label2 = gtk_label_new("Label 2")
label3 = gtk_label_new("Label 3")

hbox = gtk_hbox_new(TRUE, 5)
vbox = gtk_vbox_new(FALSE, 10)

gtk_box_pack_start(vbox, label1, TRUE, FALSE, 5)
gtk_box_pack_start(vbox, label2, TRUE, FALSE, 5)
gtk_box_pack_start(hbox, vbox, FALSE, FALSE, 5)
gtk_box_pack_start(hbox, label3, FALSE, FALSE, 5)

gtk_container_add(window, hbox)
gtk_widget_show_all(window)
gtk_main
</code>

[#TOP Back to top of document]




----


== NOTYET ==

[http://]

||*Example code: notyet.bac*||

<code language="xml">

</code>

[#TOP Back to top of document]




----


[#TOP Back to top of document]