#embed gtk3 in bacon


#summary Convert gtk3 official examples to BacCon .

The official site is http://www.basic-converter.org/
The official forum is http://basic-converter.proboards.com/ 



= BaCon with GTK3 and GTK2 Examples =

Getting started with sample widgets
Most of the examples have been converted from the gtk3 official examples
ported to BaCon code 
as a reference only to make it easier to see
how to code it with BaCon

*TOP*    Sorry for the no color highlighting wiki doesn't have BaCon yet

|| The widgets ||
|| [#CHECK CHECK] || [#SPINNER SPINNER] || [#RADIO RADIO] ||
|| [#TEXT TEXT] || [#SWITCH2 SWITCH2] || [#SWITCH SWITCH] ||
|| [#LABEL LABEL] || [#HELLO2 HELLO2] || [#BUTTON BUTTON] ||
|| [#DIALOG DIALOG] || [#WINDOW WINDOW] || [#TOGGLE-SPINNER TOGGLE-SPINNER] ||
|| [#TABS3 TABS3] || [#NOTEBOOK NOTEBOOK] || [#MENU MENU] ||
|| [#MENU2 MENU2] || [#BUILDER BUILDER] || [#GRID-PACKING GRID-PACKING]||
|| [#ENTRY ENTRY] || [#PROGRESS PROGRESS] ||[#EXPANDER EXPANDER] ||
||[#SPINBUTTON SPINBUTTON] ||
----




== CHECK ==

how to convert official examples to Simplified embedded gtk ones in BaCon
using the new PROTO option

using this official example code as the reference
[https://developer.gnome.org/gnome-devel-demos/3.5/checkbutton.c.html.en]



||*  Example code: check-gtk3-proto.bac*||


{{{
PRAGMA LDFLAGS pkg-config --cflags --libs gtk+-3.0

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_window_set_title
PROTO gtk_container_add
PROTO gtk_toggle_button_set_active
PROTO gtk_widget_show_all
PROTO gtk_window_set_default_size
PROTO gtk_window_set_title
PROTO gtk_application_new
PROTO gtk_application_window_new
PROTO gtk_check_button_new_with_label
PROTO g_signal_connect_data
PROTO gtk_toggle_button_get_active
PROTO gtk_main_quit

'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB





'====================
 SUB toggled_cb
'====================
       
	'--- signal handler for "toggled" signal of the CheckButton 
	TBUT = gtk_toggle_button_get_active (checkbutton)
	IF TBUT = 1 THEN
			gtk_window_set_title (window, "CheckButton Example")
	ELSE
			gtk_window_set_title (window, "Callback working")
	END IF
	PRINT TBUT       
END SUB
 

gtk_init(0, 0)  
window = gtk_window_new ()
gtk_window_set_title (window, "CheckButton Example")
gtk_window_set_default_size (window, 300, 100)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

checkbutton = gtk_check_button_new_with_label ("Show Title")
gtk_toggle_button_set_active (checkbutton, TRUE)

g_signal_connect_data(checkbutton, "notify::active",toggled_cb, 0, 0, 0)
gtk_container_add (window, checkbutton)
gtk_widget_show_all (window)    
gtk_main
 


}}}


[#TOP Back to top of document]

----

== TEXT ==

another official example
[https://developer.gnome.org/gnome-devel-demos/3.5/textview.c.html.en]



||*Example code: text-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_container_add 
PROTO gtk_container_set_border_width 
PROTO gtk_scrolled_window_set_policy 
PROTO gtk_text_view_set_wrap_mode 
PROTO gtk_widget_show_all 
PROTO gtk_window_set_default_size 
PROTO gtk_window_set_title 
PROTO gtk_application_new 
PROTO gtk_application_window_new 
PROTO gtk_scrolled_window_new 
PROTO gtk_text_buffer_new 
PROTO gtk_text_view_new_with_buffer 

GTK_WRAP_WORD = 2
GTK_POLICY_AUTOMATIC = 1


'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB



 
	gtk_init(0, 0)
	
	'--- Create a window with a title, and a default size 
	window = gtk_window_new ()
	gtk_window_set_title (window, "TextView Example")
	gtk_window_set_default_size (window, 220, 200)
	g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
	
	'--- The text buffer represents the text being edited 
	buffer = gtk_text_buffer_new (NULL)
	
	
	'--- Text view is a widget in which can display the text buffer. 
	'--- The line wrapping is set to break lines in between words.
	
	text_view = gtk_text_view_new_with_buffer (buffer)
	gtk_text_view_set_wrap_mode (text_view, GTK_WRAP_WORD) 
	
	
	'--- Create the scrolled window. Usually NULL is passed for both parameters so 
	'--- that it creates the horizontal/vertical adjustments automatically. Setting 
	'--- the scrollbar policy to automatic allows the scrollbars to only show up 
	'--- when needed. 
	
	scrolled_window = gtk_scrolled_window_new (NULL, NULL)
	gtk_scrolled_window_set_policy (scrolled_window, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC) 
	'--- The function directly below is used to add children to the scrolled window 
	'--- with scrolling capabilities (e.g text_view), otherwise, 
	'--- gtk_scrolled_window_add_with_viewport() would have been used
	
	gtk_container_add (scrolled_window, text_view)
	gtk_container_set_border_width (scrolled_window, 5)
	
	gtk_container_add (window, scrolled_window)	
	gtk_widget_show_all (window)	
	gtk_main	
	
	
	
	



}}}


[#TOP Back to top of document]

----



== SPINNER ==

original code was not complete to show callbacks and a fully working example 
[https://developer.gnome.org/gnome-devel-demos/3.8/spinner.c.html.en]

[http://bigbass-porteus.googlecode.com/files/spinner-gtk3-proto.png]




*had to add callbacks , buttons and signals* 

||*Example code: spinner-gtk3-proto.bac*||

{{{

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_window_set_title
PROTO gtk_widget_show_all
PROTO g_signal_connect_data
PROTO gtk_spinner_new
PROTO gtk_spinner_start
PROTO gtk_spinner_stop
PROTO gtk_container_add
PROTO gtk_window_set_default_size
PROTO gtk_box_new
PROTO gtk_box_set_homogeneous
PROTO gtk_box_pack_start

PROTO gtk_radio_action_set_group(

GTK_ORIENTATION_VERTICAL = 1


'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB




'=====================
SUB radio_clicked()
'=====================
	
	CLEAR
	PRINT "button1"
	gtk_spinner_start (spinner)

END SUB




'=====================
SUB radio_clicked2()
'=====================
	CLEAR
	PRINT "button2"
	gtk_spinner_stop (spinner)

END SUB





gtk_init(0, 0)

window = gtk_window_new ()
gtk_window_set_default_size (window, 200, 200)
gtk_window_set_title (window, "Spinner test")
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)

spinner = gtk_spinner_new ()


'---Create a radio button1 with a label
radio1 = gtk_radio_button_new_with_label_from_widget (radio1, "Start spinner.")
g_signal_connect_data(radio1, "clicked",radio_clicked, 0, 0, 0)



'---Create a radio button2 with a label
radio2 = gtk_radio_button_new_with_label_from_widget (radio2, "Stop spinner.")
g_signal_connect_data(radio2, "clicked",radio_clicked2, 0, 0, 0)
gtk_radio_action_set_group(radio1,2)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, radio1, TRUE, TRUE, 2
gtk_box_pack_start (box, radio2, TRUE, TRUE, 2)
gtk_box_pack_start (box, spinner, TRUE, TRUE, 2)
gtk_container_add (window, box)

gtk_widget_show_all (window)
gtk_main



}}}

[#TOP Back to top of document]

----


== RADIO ==

[https://developer.gnome.org/gnome-devel-demos/3.8/radiobutton.c.html.en]



||*Example code: radio-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_box_set_homogeneous
PROTO gtk_box_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_widget_show_all

'--- set undeclared values
GTK_WINDOW_TOPLEVEL = 0
GTK_ORIENTATION_VERTICAL = 1

'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB



'=====================
SUB radio_clicked()
'=====================
    CLEAR
    PRINT "button1"
END SUB


'=====================
SUB radio_clicked2()
'=====================
    CLEAR
    PRINT "button2"
END SUB



'=====================
SUB radio_clicked3()
'=====================
    CLEAR
    PRINT "button3"
END SUB




gtk_init(0, 0)

window = gtk_window_new (GTK_WINDOW_TOPLEVEL)
box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

'---Create a radio button1 with a label
radio1 = gtk_radio_button_new_with_label_from_widget (radio1, "I'm the first radio button.")
g_signal_connect_data(radio1, "clicked",radio_clicked, 0, 0, 0)

'---Create a radio button2 with a label
radio2 = gtk_radio_button_new_with_label_from_widget (radio2, "I'm the second radio button.")
g_signal_connect_data(radio2, "clicked",radio_clicked2, 0, 0, 0)

'---Create a radio button3 with a label
radio3 = gtk_radio_button_new_with_label_from_widget (radio3, "I'm the third radio button.")
g_signal_connect_data(radio3, "clicked",radio_clicked3, 0, 0, 0)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, radio1, TRUE, TRUE, 2)
gtk_box_pack_start (box, radio2, TRUE, TRUE, 2)
gtk_box_pack_start (box, radio3, TRUE, TRUE, 2)
gtk_container_add (window, box)
gtk_widget_show_all (window)

gtk_main


}}}

[#TOP Back to top of document]


----


== SWITCH2 ==

[https://developer.gnome.org/gnome-devel-demos/3.5/switch.c.html.en]

||*Example code: switch2-gtk3-proto.bac*||

{{{

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_switch_new
PROTO gtk_window_set_title
PROTO gtk_window_set_default_size
PROTO gtk_container_set_border_width
PROTO gtk_switch_set_active
PROTO gtk_grid_set_column_spacing
PROTO gtk_grid_attach




'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB




'=====================
SUB switch_clicked()
'=====================
    CLEAR
    PRINT "switch button1"
    SW1 = gtk_switch_get_active (switch1)
    PRINT SW1
END SUB





gtk_init(0, 0)

'---Create a window with a set title and default size.
'---Also, set a border width for the amount of space
'---to leave inside the window

window = gtk_window_new ()
gtk_window_set_title (window, "Switch Example")
gtk_window_set_default_size (window, 300, 100)
gtk_container_set_border_width (window, 10)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)



'---Create a label---'
label = gtk_label_new ("Title")


'---Create a switch with a default active state
switch1 = gtk_switch_new ()
gtk_switch_set_active (switch1, TRUE)


'---Create a grid and set the column spacing,
'---attach the label
'---switch onto the grid
'---position them accordingly
grid = gtk_grid_new()
gtk_grid_set_column_spacing (grid, 10)
gtk_grid_attach (grid, label, 0, 0, 1, 1)
gtk_grid_attach (grid, switch1, 1, 0, 1, 1)

'---Connecting the clicked signal to the callback
g_signal_connect_data(switch1, "notify::active",switch_clicked, 0, 0, 0)


gtk_container_add (window, grid)
gtk_widget_show_all (window)
gtk_main

}}}

[#TOP Back to top of document]




----



== SWITCH ==

[http://bigbass-porteus.googlecode.com/files/switch-gtk3-proto.png]

||*Example code: switch-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`



PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_box_set_homogeneous
PROTO gtk_box_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_switch_new 

'--- set undeclared values
GTK_WINDOW_TOPLEVEL = 0
GTK_ORIENTATION_VERTICAL = 1






'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB



'=====================
SUB switch_clicked()
'=====================
	CLEAR
	PRINT "switch button1"
	SW1 = gtk_switch_get_active (switch1)
	PRINT SW1
	END SUB


'=====================
SUB switch_clicked2()
'=====================
	CLEAR
	PRINT "switch button2"
	SW2 = gtk_switch_get_active (switch2)
	PRINT SW2
END SUB



'=====================
SUB switch_clicked3()
'=====================
	CLEAR
	PRINT "switch button3"
	SW3 = gtk_switch_get_active (switch3)
	PRINT SW3
END SUB




gtk_init(0, 0)

window = gtk_window_new (GTK_WINDOW_TOPLEVEL)

box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
gtk_box_set_homogeneous (box, TRUE)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

label = gtk_label_new ("Switch Test ");


'---Create a switch button1
switch1 = gtk_switch_new ()
g_signal_connect_data(switch1, "notify::active",switch_clicked, 0, 0, 0)

'---Create a switch button2
switch2 = gtk_switch_new ()
g_signal_connect_data(switch2, "notify::active",switch_clicked2, 0, 0, 0)

'---Create a switch button3
switch3 = gtk_switch_new ()
g_signal_connect_data(switch3, "notify::active",switch_clicked3, 0, 0, 0)

'---Pack them into a box, then show all the widgets
gtk_box_pack_start (box, label, 0, 0, 1, 1)
gtk_box_pack_start (box, switch1, TRUE, TRUE, 2)
gtk_box_pack_start (box, switch2, TRUE, TRUE, 2)
gtk_box_pack_start (box, switch3, TRUE, TRUE, 2)
gtk_container_add (window, box)
gtk_widget_show_all (window)

gtk_main

}}}

[#TOP Back to top of document]




----



== LABEL ==

ported from [http://www.cs.dartmouth.edu/~xy/cs23/gtk.html]
layout.c now call it label-gtk2-proto.bac by bigbass


[http://bigbass-porteus.googlecode.com/files/lable-gtk2-proto.png]


||*Example code: label-gtk2-proto.bac*||

{{{
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS pkg-config --cflags --libs gtk+-2.0 

'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here
 

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO gtk_window_set_position
PROTO gtk_window_set_default_size
PROTO gtk_label_new
PROTO gtk_hbox_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit
 

' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1
 

'===============
 SUB exit_prog
'===============
	gtk_main_quit
END SUB
 

gtk_init(0, 0)
window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_title(window, "Layout")
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 300, 200)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
 

label1 = gtk_label_new("Label 1")
label2 = gtk_label_new("Label 2")
label3 = gtk_label_new("Label 3")
 

hbox = gtk_hbox_new(TRUE, 5)
vbox = gtk_vbox_new(FALSE, 10)
 

gtk_box_pack_start(vbox, label1, TRUE, FALSE, 5)
gtk_box_pack_start(vbox, label2, TRUE, FALSE, 5)
gtk_box_pack_start(hbox, vbox, FALSE, FALSE, 5)
gtk_box_pack_start(hbox, label3, FALSE, FALSE, 5)
 

gtk_container_add(window, hbox)
gtk_widget_show_all(window)
gtk_main

}}}

[#TOP Back to top of document]




----





== HELLO2 ==

ported from [http://www.cs.dartmouth.edu/~xy/cs23/gtk.html]

||*Example code: hello2-gtk2-proto.bac*||

{{{
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`



'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit


' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0



'===============
SUB exit_prog
'===============
    gtk_main_quit
END SUB




gtk_init(0, 0)
window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_title(window, "Hello World!")

'--- Connect the main window to the destroy ---> replace with SUB exit_prog 
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
gtk_widget_show_all(window)        
gtk_main



}}}

[#TOP Back to top of document]




----


== DIALOG ==

[http://bigbass-porteus.googlecode.com/files/dialog-gtk2-proto.png]


More help in simple terms

when the third arg is 0 the info icon is used

when the third arg is 1 the triangle warning icon is used

when the third arg is 2 the circle question mark icon is used

when the third arg is 3 the red circle with white line in the center icon is used

when the third arg is 4 no icon is used

using GTK terms the third arg some here not used but are offered as options you can use numbers or strings

CONST GTK_MESSAGE_INFO = 0

CONST GTK_MESSAGE_WARNING = 1

CONST GTK_MESSAGE_QUESTION = 2

CONST GTK_MESSAGE_ERROR = 3



the fourth arg 0 = no buttons displayed

the fourth arg 4 = yes and no buttons displayed

using GTK terms the fourth arg you can use numbers or strings

CONST GTK_STOCK_OK = 1

CONST GTK_STOCK_CLOSE = 2

CONST GTK_STOCK_CANCEL = 3

CONST GTK_BUTTONS_YES_NO = 4

I used the string form to give an example of the fourth argument uses GTK_STOCK_OK

the fifth argument is the message you display between double quotes 



||*Example code: dialog-gtk2-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`


PROTO gtk_init, gtk_message_dialog_new

CONST GTK_STOCK_OK = 1

gtk_init(0, 0)
x = gtk_dialog_run(gtk_message_dialog_new(0, 0, 0, GTK_STOCK_OK,"Greetings from BaCon!"))
}}}

[#TOP Back to top of document]




----


== WINDOW ==

[http://]

||*Example code: window-gtk2-proto.bac*||

{{{
'
'--- set up for compiling embedded library GTK
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`




'--- this replaces the need for IMPORT. the TYPE is not needed
'--- place all the functions that you will use here

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_window_set_title
PROTO gtk_window_set_position
PROTO gtk_window_set_default_size
PROTO gtk_label_new
PROTO gtk_hbox_new
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO g_signal_connect_data,
PROTO g gtk_widget_show_all
PROTO gtk_main
PROTO gtk_main_quit


' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1




'===============
SUB exit_prog
'===============
gtk_main_quit
END SUB




gtk_init(0, 0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_title(window, "Layout")
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 300, 200)

g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

label1 = gtk_label_new("Label 1")
label2 = gtk_label_new("Label 2")
label3 = gtk_label_new("Label 3")

hbox = gtk_hbox_new(TRUE, 5)
vbox = gtk_vbox_new(FALSE, 10)

gtk_box_pack_start(vbox, label1, TRUE, FALSE, 5)
gtk_box_pack_start(vbox, label2, TRUE, FALSE, 5)
gtk_box_pack_start(hbox, vbox, FALSE, FALSE, 5)
gtk_box_pack_start(hbox, label3, FALSE, FALSE, 5)

gtk_container_add(window, hbox)
gtk_widget_show_all(window)
gtk_main
}}}

[#TOP Back to top of document]




----


== BUTTON ==

[http://bigbass-porteus.googlecode.com/files/button-gtk2-proto.png]

||*Example code: button-gtk2-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`


TRAP LOCAL


PROTO gtk_init,gtk_main_quit,gtk_window_new, gtk_window_set_default_size
PROTO gtk_window_set_title,gtk_table_new,gtk_container_add
PROTO gtk_table_attach_defaultsgtk_button_new_from_stock, gtk_table_attach_defaults
PROTO g_signal_connect_data, gtk_widget_show_all, gtk_main


SUB exit_prog
    gtk_main_quit
END SUB

gtk_init(0, 0)

window = gtk_window_new()
gtk_window_set_default_size(window, 200, 200)
gtk_window_set_title(window, "Hello world")

table = gtk_table_new(15, 15, 1)
gtk_container_add(window, table)
label = gtk_label_new("Bacon and GTK example!")
gtk_table_attach_defaults(table, label, 1, 8, 3, 7)

button = gtk_button_new_from_stock("gtk-quit")
gtk_table_attach_defaults(table, button, 10, 14, 12, 14)


g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
g_signal_connect_data(button, "clicked", exit_prog, 0, 0, 0)


gtk_widget_show_all(window)
gtk_main
}}}

[#TOP Back to top of document]




----





== TOGGLE-SPINNER ==

[http://bigbass-porteus.googlecode.com/files/toggle-spinner-gtk3-proto.png]

||*Example code: toggle-spinner-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_switch_new
PROTO gtk_window_set_title
PROTO gtk_window_set_default_size
PROTO gtk_container_set_border_width
PROTO gtk_switch_set_active
PROTO gtk_grid_set_column_spacing
PROTO gtk_grid_attach
PROTO gtk_spinner_new
PROTO gtk_spinner_start
PROTO gtk_spinner_stop

'=====================
SUB exit_prog
'=====================
    gtk_main_quit
END SUB



'=====================
SUB switch_clicked()
'=====================
CLEAR
PRINT "switch button1"
SW1 = gtk_switch_get_active (switch1)
IF SW1 = 1 THEN
        gtk_spinner_start (spinner)
ELSE
        gtk_spinner_stop (spinner)
END IF
PRINT SW1
END SUB






gtk_init(0, 0)

'---Create a window with a set title and default size.
'---Also, set a border width for the amount of space
'---to leave inside the window

window = gtk_window_new ()
gtk_window_set_title (window, "Switch Example")
gtk_window_set_default_size (window, 300, 100)
gtk_container_set_border_width (window, 10)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)



'---Create a label---'
label = gtk_label_new ("Spin")


'---Create a switch with a default active state
switch1 = gtk_switch_new ()
gtk_switch_set_active (switch1, FALSE)

spinner = gtk_spinner_new ()

'---Create a grid and set the column spacing,
'---attach the label
'---switch onto the grid
'---position them accordingly
grid = gtk_grid_new()
gtk_grid_set_column_spacing (grid, 10)
gtk_grid_attach (grid, label, 0, 0, 1, 1)
gtk_grid_attach (grid, switch1, 1, 0, 1, 1)

gtk_grid_attach (grid, spinner, 2, 0, 20, 20)

'---Connecting the clicked signal to the callback
g_signal_connect_data(switch1, "notify::active",switch_clicked, 0, 0, 0)


gtk_container_add (window, grid)
gtk_widget_show_all (window)
gtk_main

}}}

[#TOP Back to top of document]


----


== TABS3 ==

[http://bigbass-porteus.googlecode.com/files/tabs3-gtk3-proto.png]

||*Example code: tabs3-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`


PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_button_new_with_label
PROTO gtk_label_new
PROTO gtk_notebook_new
PROTO gtk_window_new
PROTO gtk_container_add
PROTO gtk_init
PROTO gtk_main
PROTO gtk_notebook_append_page
PROTO gtk_widget_show
PROTO gtk_window_set_default_size
PROTO  gtk_widget_show_all

'--- set undeclared values
GTK_WINDOW_TOPLEVEL = 0


'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB



'=====================
SUB change_current_page_cb1()
'=====================
	'---  Example signal handler for page changes 
	PRINT "button 1 pressed"
END SUB





'=====================
SUB change_current_page_cb2()
'=====================
	'---  Example signal handler for page changes 
	PRINT "button 2 pressed"
END SUB


gtk_init(0, 0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_default_size(window, 200, 100)
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

notebook = gtk_notebook_new()


'---  Append a test page to the notebook 
button1 = gtk_button_new_with_label ("button one")
gtk_widget_show(button1)
tab_label1 = gtk_label_new("tab 1")
gtk_notebook_append_page(notebook, button1,tab_label1)
g_signal_connect_data(button1, "clicked",change_current_page_cb1, 0, 0, 0)


'---  Append another test page to the notebook 
button2 = gtk_button_new_with_label("button two")
gtk_widget_show(button2)
tab_label2 = gtk_label_new("tab 2")
gtk_notebook_append_page(notebook, button2,tab_label2)
g_signal_connect_data(button2, "clicked",change_current_page_cb2, 0, 0, 0)



'---  Append another test page to the notebook 
button3 = gtk_button_new_with_label("button close")
gtk_widget_show(button3)
tab_label3 = gtk_label_new("close")
gtk_notebook_append_page(notebook, button3,tab_label3)
g_signal_connect_data(button3, "clicked",exit_prog, 0, 0, 0)


gtk_widget_show(notebook)
gtk_container_add(window, notebook)
gtk_widget_show(window)
gtk_main


}}}

[#TOP Back to top of document]

----


== NOTEBOOK ==

[http://bigbass-porteus.googlecode.com/files/notebook3-gtk2-proto.png]

source code was heavily modified during the conversion used only as a reference
[http://www.dlhoffman.com/publiclibrary/software/gtk+-html-docs/gtk_tut-8.html]


||*Example code: notebook3-gtk2-proto.bac*||

{{{

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`



PROTO gtk_container_add
PROTO gtk_container_border_width
PROTO gtk_notebook_append_page
PROTO gtk_widget_set_usize
PROTO gtk_widget_show
PROTO gtk_container_add
PROTO gtk_init
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_notebook_set_page
PROTO gtk_notebook_set_tab_pos
PROTO g_signal_connect_data
PROTO gtk_table_attach_defaults
PROTO gtk_widget_show
PROTO gtk_button_new_with_label
PROTO gtk_frame_new
PROTO gtk_label_new
PROTO gtk_notebook_new
PROTO gtk_table_new
PROTO gtk_window_new
PROTO gtk_notebook_set_current_page

GTK_POS_TOP = 2
tabnumber = 1


'=====================
SUB exit_prog
'=====================
gtk_main_quit
END SUB



'=====================
SUB gtk_notebook_next_page
'=====================
    
    CLEAR
    PRINT "next page" ,tabnumber
    
    '--- This function rotates the position of the tabs
    gtk_notebook_set_current_page(notebook, tabnumber)
    
    tabnumber = tabnumber +1
    IF tabnumber >= 3 THEN
        tabnumber = 3
    END IF     
END SUB


'=====================
SUB gtk_notebook_prev_page
'=====================

    CLEAR
    PRINT "prev page" ,    tabnumber    
    tabnumber = tabnumber -1
    
    '--- This function rotates the position of the tabs
    gtk_notebook_set_current_page(notebook, tabnumber)
    
    IF tabnumber < 1 THEN
        tabnumber = 1    
    END IF

END SUB




gtk_init(0, 0)
window = gtk_window_new ()
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)


table = gtk_table_new(2,6,TRUE)
gtk_container_add (window, table)

'--- Create a new notebook, place the position of the tabs
notebook = gtk_notebook_new ()
gtk_notebook_set_tab_pos (notebook, GTK_POS_TOP)
gtk_table_attach_defaults(table, notebook, 0,6,0,1)
gtk_widget_show(notebook)



frame = gtk_frame_new ()
gtk_widget_set_usize (frame, 100, 75)
gtk_widget_show (frame)

label = gtk_label_new ("Append Frame1",1)
gtk_container_add (frame, label)
gtk_widget_show (label)

label = gtk_label_new ("Page1",1)
gtk_notebook_append_page (notebook, frame, label)

'-------------------------------------------------

frame = gtk_frame_new ()
gtk_widget_set_usize (frame, 100, 75)
gtk_widget_show (frame)

label = gtk_label_new ("Append Frame2",2)
gtk_container_add (frame, label)
gtk_widget_show (label)

label = gtk_label_new ("Page2",2)
gtk_notebook_append_page (notebook, frame, label)

'-------------------------------------------------

frame = gtk_frame_new ()
gtk_widget_set_usize (frame, 100, 75)
gtk_widget_show (frame)

label = gtk_label_new ("Append Frame3",3)
gtk_container_add (frame, label)
gtk_widget_show (label)

label = gtk_label_new ("Page3",3)
gtk_notebook_append_page (notebook, frame, label)
'-------------------------------------------------



'--- Set what page to start at (page 1)
'gtk_notebook_set_page (notebook, 0)


'--- create a bunch of buttons
button = gtk_button_new_with_label ("close")
g_signal_connect_data(button, "clicked", exit_prog, 0, 0, 0)


gtk_table_attach_defaults(table, button, 0,1,1,2)
gtk_widget_show(button)

button = gtk_button_new_with_label ("next page")
g_signal_connect_data(button, "clicked",gtk_notebook_next_page, 0, 0, 0)

gtk_table_attach_defaults(table, button, 1,2,1,2)
gtk_widget_show(button)

button = gtk_button_new_with_label ("prev page")
g_signal_connect_data(button, "clicked",gtk_notebook_prev_page, 0, 0, 0)
gtk_table_attach_defaults(table, button, 2,3,1,2)
gtk_widget_show(button)

gtk_widget_show(table)
gtk_widget_show(window)
gtk_main


}}}

[#TOP Back to top of document]

----



== MENU ==

[http://zetcode.com/tutorials/gtktutorial/menusandtoolbars/]

||*Example code: menu-gtk2-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`

PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_init
PROTO gtk_main
PROTO gtk_menu_item_set_submenu
PROTO gtk_menu_shell_append
PROTO gtk_widget_show_all
PROTO gtk_window_set_default_size
PROTO gtk_window_set_position
PROTO gtk_window_set_title
PROTO gtk_menu_bar_new
PROTO gtk_menu_item_new_with_label
PROTO gtk_menu_new
PROTO gtk_vbox_new
PROTO gtk_window_new
PROTO gtk_main_quit
PROTO g_signal_connect_data



' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1



'=====================
SUB exit_prog
'=====================
gtk_main_quit
END SUB



gtk_init(0,0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 250, 200)
gtk_window_set_title(window, "menu")
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)

vbox = gtk_vbox_new(FALSE, 0)
gtk_container_add(window, vbox)

menubar = gtk_menu_bar_new()
filemenu = gtk_menu_new()

file = gtk_menu_item_new_with_label("File")
quit = gtk_menu_item_new_with_label("Quit")

gtk_menu_item_set_submenu(file, filemenu)
gtk_menu_shell_append(filemenu, quit)
gtk_menu_shell_append(menubar, file)
gtk_box_pack_start(vbox, menubar, FALSE, FALSE, 3)

g_signal_connect_data(quit, "activate",exit_prog, 0, 0, 0)
gtk_widget_show_all(window)

gtk_main
}}}


[#TOP Back to top of document]





== MENU2 ==

[http://zetcode.com/tutorials/gtktutorial/menusandtoolbars/]

Image menus, 
*removed the  mnemonics & accelerators to make it easier to compile


||*Example code: menu2-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`


PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_init
PROTO gtk_main
PROTO gtk_menu_item_set_submenu
PROTO gtk_menu_shell_append
PROTO gtk_widget_add_accelerator
PROTO gtk_widget_show_all
PROTO gtk_window_add_accel_group
PROTO gtk_window_set_default_size
PROTO gtk_window_set_position
PROTO gtk_window_set_title
PROTO gtk_accel_group_new
PROTO gtk_image_menu_item_new_from_stock
PROTO gtk_menu_bar_new
PROTO gtk_menu_item_new_with_mnemonic
PROTO gtk_menu_new
PROTO gtk_separator_menu_item_new
PROTO gtk_vbox_new
PROTO gtk_window_new
PROTO gtk_main_quit
PROTO g_signal_connect_data



' get the needed missing values
GTK_WINDOW_TOPLEVEL = 0
GTK_WIN_POS_CENTER = 1

CONST GTK_STOCK_NEW = "gtk-new"
CONST GTK_STOCK_OPEN = "gtk-open"
CONST GTK_STOCK_QUIT = "gtk-quit"

GDK_CONTROL_MASK = 4
GTK_ACCEL_VISIBLE = 1



'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB



gtk_init(0,0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_position(window, GTK_WIN_POS_CENTER)
gtk_window_set_default_size(window, 250, 200)
gtk_window_set_title(window, "menu")

vbox = gtk_vbox_new(FALSE, 0)
gtk_container_add(window, vbox)

menubar = gtk_menu_bar_new()
filemenu = gtk_menu_new()

accel_group = gtk_accel_group_new()
gtk_window_add_accel_group(window, accel_group)

file = gtk_menu_item_new_with_mnemonic("_File")
new = gtk_image_menu_item_new_from_stock(GTK_STOCK_NEW, NULL)
open = gtk_image_menu_item_new_from_stock(GTK_STOCK_OPEN, NULL)
sep = gtk_separator_menu_item_new()
quit = gtk_image_menu_item_new_from_stock(GTK_STOCK_QUIT) 


gtk_menu_item_set_submenu(file, filemenu)
gtk_menu_shell_append(filemenu, new)
gtk_menu_shell_append(filemenu, open)
gtk_menu_shell_append(filemenu, sep)
gtk_menu_shell_append(filemenu, quit)
gtk_menu_shell_append(menubar, file)
gtk_box_pack_start(vbox, menubar, FALSE, FALSE, 3)

g_signal_connect_data(quit, "activate",exit_prog, 0, 0, 0)
gtk_widget_show_all(window)
gtk_main

}}}


[#TOP Back to top of document]

== BUILDER ==


This allows you to read in a builder.ui 
place the builder.ui in the same place as builder-proto.bac

Thank you alexfish for this example 

||*Example code: builder-proto.bac*||

{{{
'@ GTK BUILDER this is converted from Offical GTK-Demos , Should be able to install from repo's
'@ alexfish Bacon Converter Forums
'@ Should be able to read Glade Files , saved as Gtk-Builder Files

PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

PROTO gtk_init
PROTO gtk_builder_new
PROTO gtk_builder_add_from_file
PROTO gtk_builder_get_object
PROTO g_signal_connect_data
PROTO gtk_main_quit
PROTO gtk_main

gtk_init(0, 0)

'=====================
SUB exit_prog
'=====================
gtk_main_quit
END SUB

SUB button1_cb
    PRINT "button 1"
END SUB

SUB button2_cb
     PRINT "button 2"
END SUB


builder = gtk_builder_new ()
'@ change the path to the ui file
gtk_builder_add_from_file (builder, "builder.ui", NULL)

window = gtk_builder_get_object (builder, "window")
    g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)


button1 = gtk_builder_get_object (builder, "button1")
    g_signal_connect_data(button1, "clicked",button1_cb, 0, 0, 0)
    
button2 = gtk_builder_get_object (builder, "button2")
    g_signal_connect_data(button2, "clicked",button2_cb, 0, 0, 0)
    
quit = gtk_builder_get_object (builder, "quit")
    g_signal_connect_data(quit , "clicked",exit_prog, 0, 0, 0)
gtk_main

}}}




||*Example code: builder.ui*||

this file gets read in on the fly  to modify the builder compiled app

{{{
<interface>
<object id="window" class="GtkWindow">
<property name="visible">True</property>
<property name="title">bacon Grid</property>
<property name="border-width">10</property>
<child>
<object id="grid" class="GtkGrid">
<property name="visible">True</property>
<child>
<object id="button1" class="GtkButton">
<property name="visible">True</property>
<property name="label">Button 1</property>
</object>
<packing>
<property name="left-attach">0</property>
<property name="top-attach">0</property>
</packing>
</child>
<child>
<object id="button2" class="GtkButton">
<property name="visible">True</property>
<property name="label">Button 2</property>
</object>
<packing>
<property name="left-attach">1</property>
<property name="top-attach">0</property>
</packing>
</child>
<child>
<object id="quit" class="GtkButton">
<property name="visible">True</property>
<property name="label">Quit</property>
</object>
<packing>
<property name="left-attach">0</property>
<property name="top-attach">1</property>
<property name="width">2</property>
</packing>
</child>
</object>
<packing>
</packing>
</child>
</object>
</interface>

}}}


[#TOP Back to top of document]






== GRID-PACKING ==

[http://bigbass-porteus.googlecode.com/files/grid-packing.png]

ported from the grid-packing example in gtk sources 
modified for BaCon use 

||*Example code: grid-packing-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

PROTO gtk_container_add 
PROTO gtk_container_set_border_width 
PROTO gtk_grid_attach 
PROTO gtk_init 
PROTO gtk_main 
PROTO gtk_widget_show_all 
PROTO gtk_window_set_title 
PROTO gtk_button_new_with_label 
PROTO gtk_grid_new 
PROTO gtk_window_new 
PROTO g_signal_connect_data
PROTO gtk_main_quit

GTK_WINDOW_TOPLEVEL = 0

'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB


'=====================
SUB button1_cb
'=====================
	PRINT "button 1"
END SUB


'=====================
SUB button2_cb
'=====================
	PRINT "button 2"
END SUB




'---  This is called in all GTK applications. Arguments are parsed
'---  from the command line and are returned to the application.

gtk_init (0,0)

'---  create a new window, and set its title
window = gtk_window_new (GTK_WINDOW_TOPLEVEL)
gtk_window_set_title (window, "Grid")
g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
gtk_container_set_border_width (window, 10)

'---  Here we construct the container that is going pack our buttons
grid = gtk_grid_new ()

'---  Pack the container in the window
gtk_container_add (window, grid)

button1 = gtk_button_new_with_label ("Button 1")
g_signal_connect_data(button1, "clicked",button1_cb, 0, 0, 0)

'---  Place the first button in the grid cell (0, 0), and make it fill
'---  just 1 cell horizontally and vertically (ie no spanning)

gtk_grid_attach (grid, button1, 0, 0, 1, 1)

button2 = gtk_button_new_with_label ("Button 2")
g_signal_connect_data(button2, "clicked",button2_cb, 0, 0, 0)

'---  Place the second button in the grid cell (1, 0), and make it fill
'---  just 1 cell horizontally and vertically (ie no spanning)

gtk_grid_attach (grid, button2, 1, 0, 1, 1)

button3 = gtk_button_new_with_label ("Quit")
g_signal_connect_data(button3  , "clicked",exit_prog, 0, 0, 0)

'---  Place the Quit button in the grid cell (0, 1), and make it
'---  span 2 columns.

gtk_grid_attach (grid, button3, 0, 1, 2, 1)

'---  Now that we are done packing our widgets, we show them all
'---  in one go, by calling gtk_widget_show_all() on the window.
'---  This call recursively calls gtk_widget_show() on all widgets
'---  that are contained in the window, directly or indirectly.

gtk_widget_show_all (window)

'---  All GTK applications must have a gtk_main(). Control ends here
'---  and waits for an event to occur (like a key press or a mouse event),
'---  until gtk_main_quit() is called.

gtk_main 

}}}


[#TOP Back to top of document]



== ENTRY ==

source code converted to PROTO
[https://developer.gnome.org/gnome-devel-demos/3.5/entry.c.html.en]

||*Example code: entry-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_main
PROTO gtk_container_add
PROTO gtk_container_set_border_width
PROTO gtk_widget_show_all
PROTO gtk_window_set_default_size
PROTO gtk_window_set_title
PROTO gtk_entry_get_text
PROTO gtk_entry_new



'=======================
SUB EXIT_PROG()
'=======================
    gtk_main_quit
END SUB



'---This is the callback function. It is a handler function
'---which reacts to the signal. In this case, it will grab the
'---text input from the entry box and print out a line to the user.
'---when you press enter

'=======================
SUB on_activate
'=======================
    name$ = (char *)gtk_entry_get_text (entry_box)
    PRINT name$
END SUB



gtk_init(0, 0)

'---Create a window with a title, a default size,
'---and a set border width
window = gtk_window_new ()
gtk_window_set_title (window, "To get the entry press enter")
gtk_window_set_default_size (window, 350, 100)
gtk_container_set_border_width (window, 10)
g_signal_connect_data(window, "destroy", EXIT_PROG, 0, 0, 0)

'---Create a new entry box, and add it to the window
entry_box = gtk_entry_new ()
gtk_container_add (window, entry_box)

'---Connecting the activate signal to the callback
g_signal_connect_data (entry_box, "activate", on_activate,0,0,0)

gtk_widget_show_all (window)
gtk_main

}}}


[#TOP Back to top of document]


== PROGRESS ==

[http://bigbass-porteus.googlecode.com/files/timeout.png]


This is how to add a timeout to GTK3
and use it with PROTO

now the progressbar auto updates automatically
there wasn't a complete simple example so I had to make one

and notice pointer free code


||*Example code: progress-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main_quit
PROTO gtk_main
PROTO gtk_container_add
PROTO gtk_grid_attach
PROTO gtk_grid_attach_next_to
PROTO gtk_progress_bar_pulse
PROTO gtk_widget_show_all
PROTO gtk_window_set_title
PROTO gtk_application_new
PROTO gtk_button_new_with_label
PROTO gtk_grid_new
PROTO gtk_progress_bar_new
PROTO gtk_window_new
PROTO g_signal_connect_data
PROTO gtk_progress_bar_set_fraction
PROTO gtk_progress_bar_get_fraction
PROTO gtk_window_set_default_size
PROTO  g_timeout_add

GTK_POS_BOTTOM = 3

fraction = 0.1

'---How to use a time out to update a progress bar

'=============================
FUNCTION timeout_callback
'=============================

    gtk_progress_bar_pulse (progress_bar)   

    '---Increase the bar by 10% each time this function is called

    '---Fill in the bar with the new fraction
    gtk_progress_bar_set_fraction (progress_bar, fraction)

    fraction = fraction + 0.1
    IF fraction >= 1 THEN
        fraction = 0
    END IF
 
    RETURN TRUE

END FUNCTION



'==============
SUB EXIT_PROG
'==============
    gtk_main_quit
END SUB




gtk_init(0, 0)

'---Create the window and set a title
window = gtk_window_new ()
gtk_window_set_title (window, "Progress Example")
gtk_window_set_default_size (window, 270, 70)
g_signal_connect_data(window, "destroy", EXIT_PROG, 0, 0, 0)


'---Create a button with a label
button = gtk_button_new_with_label ("QUIT")

'---Create the progress bar
progress_bar = gtk_progress_bar_new ()

'---Create a grid and attach the button and progress bar accordingly
grid = gtk_grid_new ()
gtk_grid_attach (grid, button, 1, 1, 1, 1)
gtk_grid_attach_next_to (grid, \
                     progress_bar, \
                     button, \
                     GTK_POS_BOTTOM, 1, 1)

'---Connecting the clicked signal to the callback function
g_signal_connect_data (button, "clicked", EXIT_PROG)


g_timeout_add(500, timeout_callback, NULL)
gtk_container_add (window, grid)
gtk_widget_show_all (window)
gtk_main


}}}


[#TOP Back to top of document]




== EXPANDER ==

[http://bigbass-porteus.googlecode.com/files/exapander.png]

thanks alexfish for this example 

||*Example code: expander-gtk3-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-3.0`

'@ Expander demo by alexfish `bacon converter forum`


PROTO gtk_init
PROTO gtk_window_new
PROTO gtk_main
PROTO gtk_main_quit
PROTO gtk_window_set_title
PROTO gtk_container_add
PROTO gtk_widget_show_all
PROTO gtk_window_set_default_size
PROTO gtk_window_set_title
PROTO gtk_label_new
PROTO gtk_expander_new_with_mnemonic
PROTO gtk_expander_set_expanded
PROTO gtk_box_new
PROTO gtk_box_set_homogeneous
PROTO gtk_box_pack_start
PROTO g_signal_connect_data

'=====================
SUB exit_prog
'=====================
	gtk_main_quit
END SUB
'====================
    GTK_WINDOW_TOPLEVEL = 0
    GTK_ORIENTATION_VERTICAL = 1



gtk_init(0, 0)

window = gtk_window_new (GTK_WINDOW_TOPLEVEL)
gtk_window_set_title (window, "Expander Example")
gtk_window_set_default_size (window, 300, 200)
    g_signal_connect_data(window, "delete-event", exit_prog, 0, 0, 0)
    
box1 = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2)
    gtk_box_set_homogeneous (box1, TRUE)

lab1 = gtk_label_new_with_mnemonic ("BaCon ConVerter")
    gtk_box_pack_start (box1, lab1, TRUE, TRUE, 2)    

exp_1=gtk_expander_new_with_mnemonic("click me")
    gtk_box_pack_start (box1, exp_1, TRUE, TRUE, 2)
    lab2 = gtk_label_new_with_mnemonic ("BaCon is Brill")
    gtk_container_add(exp_1,lab2)

    gtk_container_add(window,box1)
    
gtk_widget_show_all (window)
gtk_main

}}}


[#TOP Back to top of document]


== SPINBUTTON ==

source that was ported to PROTO 
[http://read.pudn.com/downloads154/sourcecode/unix_linux/679094/rule/spinButton.c__.htm]


This is the first example I used pointers and included the gtk.h
the first time in about 20 examples

(I hope to later convert it to pointer free code )

||*Example code: spinbutton-gtk2-proto.bac*||

{{{
PRAGMA LDFLAGS `pkg-config --cflags --libs gtk+-2.0`
PRAGMA INCLUDE gtk-2.0/gtk/gtk.h


PROTO gtk_window_set_title
PROTO gtk_box_pack_start
PROTO gtk_container_add
PROTO gtk_init
PROTO gtk_main
PROTO gtk_widget_show
PROTO gtk_widget_show_all
PROTO gtk_adjustment_new
PROTO gtk_button_new_with_label
PROTO gtk_hbox_new
PROTO gtk_label_new
PROTO gtk_spin_button_get_value_as_int
PROTO gtk_spin_button_new
PROTO gtk_window_new
PROTO gtk_main_quit
PROTO g_signal_connect_data
PROTO gtk_window_set_default_size

GLOBAL *window TYPE GtkWidget
GLOBAL *button TYPE GtkWidget
GLOBAL *label TYPE GtkWidget
GLOBAL *box TYPE GtkWidget
GLOBAL *spin TYPE GtkWidget


GLOBAL *adjustment TYPE GtkObject


'==============
SUB EXIT_PROG
'==============
    gtk_main_quit
END SUB


'==============
SUB button_event
'==============

    value = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(spin))
    PRINT value
END SUB




gtk_init(0, 0)

window = gtk_window_new(GTK_WINDOW_TOPLEVEL)
gtk_window_set_default_size (GTK_WINDOW(window), 270, 50)


'---Connecting the clicked signal to the callback function
g_signal_connect_data(window, "destroy", EXIT_PROG, 0, 0, 0)


box = gtk_hbox_new(FALSE, 0)
gtk_container_add(GTK_CONTAINER(window), box)

adjustment = gtk_adjustment_new(2013, 1900, 2100, 1, 1, 0)
spin = gtk_spin_button_new(GTK_ADJUSTMENT(adjustment), 0.5, 0)
gtk_box_pack_start(GTK_BOX(box), spin, TRUE, TRUE, 5)
gtk_widget_show(spin)

label = gtk_label_new("year")
gtk_box_pack_start(GTK_BOX(box), label, TRUE, TRUE, 0)
gtk_widget_show(label)

button = gtk_button_new_with_label("button")
gtk_box_pack_start(GTK_BOX(box), button, TRUE, TRUE, 0)

g_signal_connect_data(button, "clicked", button_event, 0, 0, 0)
gtk_widget_show(button)

gtk_widget_show(box)
gtk_widget_show(window)


gtk_main 
}}}


[#TOP Back to top of document]

== NOTYET ==

[http://]

||*Example code: notyet.bac*||

{{{

}}}


[#TOP Back to top of document]

== NOTYET ==

[http://]

||*Example code: notyet.bac*||

{{{

}}}


[#TOP Back to top of document]

== NOTYET ==

[http://]

||*Example code: notyet.bac*||

{{{

}}}


[#TOP Back to top of document]

== NOTYET ==

[http://]

||*Example code: notyet.bac*||

{{{

}}}


[#TOP Back to top of document]
[#TOP Back to top of document]